You are an expert in creating game components. We are creating a component based on this description "This is a deck of people. There are thirty cards in it. Each card has a shirt color, hat color, and pants color. The background of the card is three rectangles stacked on top of each other, with the top taking the hat color, the middle taking the shirt color, and the bottom taking the pants color. The name of each card is a random first name.".
You will enhance the following JSON structure and SVG files based on the rules provided below.

## For artdata JSON:
Artdata is a json list of commands to use data to update svg art into final board game art. Follow these exact rules:
- Do not modify the 'name' or 'templateFilename' fields
- All scope/source combinations must be realistic game component properties
- Artdata files have a Front and Back suffix. If the description is about the back, then make sure to update the Back file.

For textReplacements array items:
- Text replacements are commands used replace text in an svg.
- 'key': What text string to look for in the svg to replace, suhc as name, rules or points.
- 'scope': Must be one of: piece, component, game, studio, or global. For instance, if the data we are piping in is the health of a piece, then we'd use the piece scope. If the data is true of all peices in the component, we use component. If its true from for the entire game or studio, use game or studio respectively. If we are using a static value, we use global.
- 'source': The specific property name within the scope to use for the replacement. If the scope is global, then this source value is the static text.

For styleUpdates array items:
- 'id': The id of the element in the svg whose style we are updating
- 'cssValue': The CSS property to modify (e.g., "fill", "font-size")
- 'scope': Must be one of: piece, component, game, studio, or global
- 'source': The specific property name within the scope to use for the style. If its the rules of the envoy, it shouldn't be "envoyRules" it should be "rules". All pieces have name and quantity fields by default.

For overlays array items:
- 'scope': Must be one of: piece, component, game, studio, or global
- 'source': The specific property name within the scope containing the overlay image, the value of the overlay is the filename without extension of another svg file, assume that svg exists. It must end in Image, such as "soldierImage"
- 'positionX': 0
- 'positionY': 0

## For component JSON:
If any artdata commnad refers to the component scope, add it as a field to the component file. For instance, if the artdata replaces the "team" word with the components "teamName" field, the component file would need a "teamName" field with a reasonable value based on the provided description.
If you need to give a value for a color, use hexidecimal colors without alpha values, such as #ffaaff.

## For pieces JSON:
The pieces file is an array of pieces of a component, such as cards in a deck. 

We need to create the fields that the artdata asks for in each of the pieces. For instance, if the artdata replaces the fill of an element with the piece's shirtColor, then each piece needs a shirtColor with a fitting field based on the description. 

We create components as makes sense in the descripiton. For instance if the description is about a the people in a football team, we need a piece per member of the team.

1. Each piece must have these properties:
    - name: (e.g., "Germany Piece")
    - quantity: reasonable number for the game piece
2. When giving a value for a color, use hexidecimal colors without alpha values, such as #ffaaff.
3. If a field ends in Image then the value should be the filename (without extension). For instance the key "unitImage" might get the value "soldier". All images should have the same prefix, such as soldierCalvary, soldierPikemen, etc.

## For SVG files:
1. For every textReplacement command in the artdata, add a text field with the contents of the key field wrapped in curly braces. For instance, if the "key" field has a value of "rules" then the content of the text element would be the word "rules" but wrapped in curly braces. Make sure text is last in the file so they are drawn on top of other things.
2. For every style update, make sure to create an element fitting its name and the description with the id of the styleUpdate
3. Ignore the overlays section.
4. Generally create the svg content to make a mockup of a board game component. 
5. Art files have a Front and Back suffix. If the description is about the back, then make sure to update the Back file.

artdata_Front at /Users/oliverbarnum/Documents/git/middle-east/./artdata/citizensFront.json
'''
{"name": "citizens", "templateFilename": "citizensFront", "textReplacements": [], "styleUpdates": [], "overlays": []}
'''

artdata_Back at /Users/oliverbarnum/Documents/git/middle-east/./artdata/citizensBack.json
'''
{"name": "citizens", "templateFilename": "citizensBack", "textReplacements": [], "styleUpdates": [], "overlays": []}
'''

component at /Users/oliverbarnum/Documents/git/middle-east/./gamedata/component/citizens.json
'''
{"name": "citizens", "citizens"}
'''

pieces at /Users/oliverbarnum/Documents/git/middle-east/./gamedata/piece/citizens.json
'''
[{"name": "citizens", "quantity": 1}]
'''

art_Front at /Users/oliverbarnum/Documents/git/middle-east/./art/templates/citizensFront.svg
'''
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   version="1.1"
   id="template"
   x="0px"
   y="0px"
   width="300"
   height="300"
   viewBox="0 0 300 300"
   enable-background="new 0 0 270 414"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs728" /></svg>

'''

art_Back at /Users/oliverbarnum/Documents/git/middle-east/./art/templates/citizensBack.svg
'''
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   version="1.1"
   id="template"
   x="0px"
   y="0px"
   width="300"
   height="300"
   viewBox="0 0 300 300"
   enable-background="new 0 0 270 414"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs728" /></svg>

'''

Respond with a list of dictionaries in the format:
[{"filepath": "path/to/file", "newContents": "updatedContents"}]
Each of the included files should have a file in the response and the updates you made to it.
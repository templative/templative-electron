on:
  push: {}

permissions:
  contents: write

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          missing_secrets=()
          
          # AWS credentials
          [[ -z "${{ secrets.AWS_ACCESS_KEY }}" ]] && missing_secrets+=("AWS_ACCESS_KEY")
          [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]] && missing_secrets+=("AWS_SECRET_ACCESS_KEY")
          
          # Apple credentials
          [[ -z "${{ secrets.APPLE_ID }}" ]] && missing_secrets+=("APPLE_ID")
          [[ -z "${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}" ]] && missing_secrets+=("TEMPLATIVE_APP_SPECIFIC_PASSWORD")
          [[ -z "${{ secrets.APPLE_TEAM_ID }}" ]] && missing_secrets+=("APPLE_TEAM_ID")
          
          # Windows signing
          [[ -z "${{ secrets.AWS_SIGNING_PROFILE_NAME }}" ]] && missing_secrets+=("AWS_SIGNING_PROFILE_NAME")
          
          # OSX certificates
          [[ -z "${{ secrets.CERTIFICATE_OSX_APPLICATION }}" ]] && missing_secrets+=("CERTIFICATE_OSX_APPLICATION")
          [[ -z "${{ secrets.CERTIFICATE_PASSWORD }}" ]] && missing_secrets+=("CERTIFICATE_PASSWORD")
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing:"
            printf "  - %s\n" "${missing_secrets[@]}"
            exit 1
          else
            echo "All required secrets are present."
          fi

  check-version:
    needs: validate-secrets
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.current-version }}
      should_build: ${{ steps.check-s3.outputs.should_build }}
    steps:
      - uses: actions/checkout@v2
      
      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - name: Check if version exists
        id: check-s3
        run: |
          VERSION=${{steps.package-version.outputs.current-version}}
          if aws s3 ls "s3://templative-artifacts/win32/x64/Templative-win32-x64-${VERSION}.zip" >/dev/null 2>&1 || \
             aws s3 ls "s3://templative-artifacts/darwin/x64/Templative-darwin-x64-${VERSION}.zip" >/dev/null 2>&1 || \
             aws s3 ls "s3://templative-artifacts/darwin/arm64/Templative-darwin-arm64-${VERSION}.zip" >/dev/null 2>&1; then
            echo "Version ${VERSION} already exists, skipping build"
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version ${VERSION} does not exist, proceeding with build"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          fi

  templative-windows:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        node:
          - 18
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - name: Setup DigiCert Software Trust Manager
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Setup DigiCert Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set DigiCert Variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      - name: Verify DigiCert Certificate File and Environment
        shell: pwsh
        run: |
          Write-Host "Checking certificate file..."
          $certPath = "D:\Certificate_pkcs12.p12"
          if (Test-Path $certPath) {
            Write-Host "✅ Certificate file exists at: $certPath"
            $fileInfo = Get-Item $certPath
            Write-Host "File size: $($fileInfo.Length) bytes"
            Write-Host "Created: $($fileInfo.CreationTime)"
          } else {
            Write-Host "❌ Certificate file does not exist at: $certPath"
          }
          
          Write-Host "Environment variables:"
          Write-Host "SM_HOST: $env:SM_HOST"
          Write-Host "SM_API_KEY: $(if($env:SM_API_KEY) { '***SET***' } else { 'NOT SET' })"
          Write-Host "SM_CLIENT_CERT_FILE: $env:SM_CLIENT_CERT_FILE"
          Write-Host "SM_CLIENT_CERT_PASSWORD: $(if($env:SM_CLIENT_CERT_PASSWORD) { '***SET***' } else { 'NOT SET' })"
          
      - name: Verify DigiCert setup
        shell: cmd
        run: smctl certificate list

      - name: Debug DigiCert Authentication
        shell: cmd
        run: |
          echo "Testing DigiCert authentication..."
          smctl keypair list
          echo "Listing available certificates..."
          smctl certificate list
          echo "Checking certificate details with different formats..."
          smctl certificate list --cert-hash-alg=SHA1
          smctl certificate list --cert-hash-alg=SHA256

      - name: Debug Certificate Fingerprint
        shell: pwsh
        run: |
          Write-Host "Expected fingerprint from secret: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          Write-Host "Available certificates:"
          $certsOutput = & smctl certificate list --cert-hash-alg=SHA1
          Write-Host $certsOutput
          
          Write-Host "`nTrying SHA256 format as well:"
          $certsOutputSHA256 = & smctl certificate list --cert-hash-alg=SHA256
          Write-Host $certsOutputSHA256
          
          Write-Host "`nCertificate details with full output:"
          $fullOutput = & smctl certificate list
          Write-Host $fullOutput

      - name: Normalize fingerprint and verify match
        shell: pwsh
        run: |
          $secretFingerprint = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          Write-Host "Secret fingerprint: '$secretFingerprint'"
          
          # Remove any colons, spaces, and convert to uppercase
          $normalizedSecret = $secretFingerprint -replace '[:\s]', '' | ForEach-Object { $_.ToUpper() }
          Write-Host "Normalized secret: '$normalizedSecret'"
          
          # Get the available certificates and extract fingerprints
          $certsOutput = & smctl certificate list --cert-hash-alg=SHA1
          Write-Host "Raw certificate output:"
          Write-Host $certsOutput
          
          # Check if our normalized fingerprint appears in the output
          if ($certsOutput -match $normalizedSecret) {
            Write-Host "✅ Fingerprint match found!"
          } else {
            Write-Host "❌ Fingerprint not found in available certificates"
            Write-Host "Available fingerprints should be checked manually against: $normalizedSecret"
          }



      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          
      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Move Windows Squirrel Files into directory 
        shell: bash
        run: |
          ls
          mkdir ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          cp ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}-full.nupkg ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}-full.nupkg
          cp ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe
          cp ./out/make/squirrel.windows/x64/RELEASES ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES
          cd ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          ls
          cd ..

      - name: Show contents directory
        shell: bash
        run: |
          ls -la
          echo "Checking for Windows Setup.exe file..."
          SETUP_FILE="./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"
          if [ -f "$SETUP_FILE" ]; then
            echo "✅ Setup.exe file exists at: $SETUP_FILE"
            ls -la "$SETUP_FILE"
          else
            echo "❌ Setup.exe file does not exist at: $SETUP_FILE"
            echo "Contents of directory:"
            ls -la "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/" || echo "Directory does not exist"
          fi

      - name: Ensure signtool is available
        shell: pwsh
        run: |
          Write-Host "Locating signtool.exe..."
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe |
                      Where-Object { $_.FullName -match "\\x64\\" } |
                      Sort-Object FullName -Descending |
                      Select-Object -First 1
          if (-not $signtool) {
            Write-Error "signtool.exe not found on the runner. Ensure Windows SDK is installed."
            exit 1
          }
          $sigDir = Split-Path $signtool.FullName -Parent
          Write-Host "Using signtool at: $sigDir"
          # Make signtool available to subsequent steps and this step
          "$sigDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "$sigDir;$env:PATH"
          Write-Host "signtool version check:"
          $exe = Join-Path $sigDir 'signtool.exe'
          $help = & $exe -? 2>&1
          $help | Select-Object -First 1 | Write-Host

      - name: Sign the Windows Setup.exe with DigiCert
        shell: pwsh
        run: |
          Write-Host "Signing Windows Setup.exe using keypair alias method..."
          $setup = "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"
          & smctl sign --keypair-alias key_1259041222 --input $setup --verbose --timestamp
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Keypair alias failed. Let's try creating proper PKCS11 config..."
            @(
              'name=DigiCert-SSM'
              'library=C:\\Program Files\\DigiCert\\SSM\\ssm-pkcs11.dll'
              'slot=0'
            ) | Set-Content pkcs11.conf
            & smctl sign --keypair-alias key_1259041222 --config-file pkcs11.conf --input $setup --verbose --timestamp
            if ($LASTEXITCODE -ne 0) {
              Write-Host "All signing attempts failed. Environment debug info:"
              Get-ChildItem "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/" | Format-List
              Write-Host "SM_HOST=$env:SM_HOST"
              Write-Host "SM_CLIENT_CERT_FILE=$env:SM_CLIENT_CERT_FILE"
              exit $LASTEXITCODE
            }
          }
          Write-Host "Signing successful!"

      - name: Verify code signing
        shell: pwsh
        run: |
          $setupExePath = "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"
          $sigCheck = Get-AuthenticodeSignature $setupExePath
          
          Write-Host "=== SIGNATURE VERIFICATION RESULTS ==="
          Write-Host "Signature status: $($sigCheck.Status)"
          Write-Host "Signer: $($sigCheck.SignerCertificate.Subject)"
          Write-Host "Status message: $($sigCheck.StatusMessage)"
          
          # More detailed certificate information
          Write-Host "`n=== CERTIFICATE DETAILS ==="
          Write-Host "  - Issuer: $($sigCheck.SignerCertificate.Issuer)"
          Write-Host "  - Valid from: $($sigCheck.SignerCertificate.NotBefore)"
          Write-Host "  - Valid to: $($sigCheck.SignerCertificate.NotAfter)"
          Write-Host "  - Thumbprint: $($sigCheck.SignerCertificate.Thumbprint)"
          
          # Check if signature is valid
          if ($sigCheck.Status -eq "Valid") {
            Write-Host "`n✅ SUCCESS: Setup.exe is properly signed!"
          } else {
            Write-Host "`n❌ FAILED: Signature is not valid"
            exit 1
          }

      - name: Verify code signing
        shell: cmd
        run: |
          signtool verify /v /pa "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"

      - name: Upload Releases
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES s3://templative-artifacts/win32/x64/RELEASES --region us-west-2

      - name: Zip Windows Squirrel Files 
        run: |
          Compress-Archive -Path ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/* ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip 
          dir

      - name: Deploy Windows to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip s3://templative-artifacts/win32/x64/Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip --region us-west-2
          
      - name: Publish the Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          
      - name: Check certificate requests and templates
        shell: cmd
        run: |
          echo "Checking certificate requests..."
          smctl certificate request list
          echo "Checking available certificate templates..."
          smctl certificate template list
          echo "Checking if we need to create a certificate..."
          smctl certificate create --help

  templative-osx:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    # timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            node: 18
            arch: x64
          - os: macos-latest
            node: 18
            arch: arm64
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Add OSX Certifications
        run: |
          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          echo $CERTIFICATE_PASSWORD
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
          echo "First few lines of the decoded certificate file:"
          head -n 10 $CERTIFICATE_P12
          security create-keychain -p actions $KEY_CHAIN
          security default-keychain -s $KEY_CHAIN
          security unlock-keychain -p actions $KEY_CHAIN
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
          rm -fr *.p12
        env:
          CERTIFICATE_OSX_APPLICATION: ${{secrets.CERTIFICATE_OSX_APPLICATION}}
          CERTIFICATE_PASSWORD: ${{secrets.CERTIFICATE_PASSWORD}}
      
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Cache Electron binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/electron
          key: ${{ runner.os }}-electron-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
      
      - name: Use debugging electron
        run: export DEBUG=electron*

      - name: Set architecture
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "Building for architecture: ${{ matrix.arch }}"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Publish Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}
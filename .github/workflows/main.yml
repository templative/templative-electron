on:
  push: {}

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.current-version }}
      should_build: ${{ steps.check-s3.outputs.should_build }}
    steps:
      - uses: actions/checkout@v2
      
      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - name: Check if version exists
        id: check-s3
        run: |
          VERSION=${{steps.package-version.outputs.current-version}}
          if aws s3 ls "s3://templative-artifacts/win32/unsigned/x64/Templative-win32-x64-${VERSION}.zip" >/dev/null 2>&1 && \
             aws s3 ls "s3://templative-artifacts/darwin/unsigned/x64/Templative-darwin-x64-${VERSION}.zip" >/dev/null 2>&1 && \
             aws s3 ls "s3://templative-artifacts/darwin/unsigned/arm64/Templative-darwin-arm64-${VERSION}.zip" >/dev/null 2>&1; then
            echo "Version ${VERSION} already exists, skipping build"
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version ${VERSION} does not exist, proceeding with build"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          fi

  templative-windows:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        node:
          - 18
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Publish Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
      
      - name: Move Windows Squirrel Files into directory 
        shell: bash
        run: |
          ls
          mkdir ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          mv ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}-full.nupkg ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}-full.nupkg
          mv ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe
          mv ./out/make/squirrel.windows/x64/RELEASES ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES
          cd ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          ls
          cd ..

      - name: Upload Releases
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES s3://templative-artifacts/win32/unsigned/x64/RELEASES --region us-west-2

      - name: Zip Windows Squirrel Files 
        run: |
          Compress-Archive -Path ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/* ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip 
          dir

      - name: Deploy Windows to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip s3://templative-artifacts/win32/unsigned/x64/Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip --region us-west-2
          
  templative-osx:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            node: 18
            arch: x64
          - os: macos-latest
            node: 18
            arch: arm64
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Add OSX Certifications
        run: |
          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          echo $CERTIFICATE_PASSWORD
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
          echo "First few lines of the decoded certificate file:"
          head -n 10 $CERTIFICATE_P12
          security create-keychain -p actions $KEY_CHAIN
          security default-keychain -s $KEY_CHAIN
          security unlock-keychain -p actions $KEY_CHAIN
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
          rm -fr *.p12
        env:
          CERTIFICATE_OSX_APPLICATION: ${{secrets.CERTIFICATE_OSX_APPLICATION}}
          CERTIFICATE_PASSWORD: ${{secrets.CERTIFICATE_PASSWORD}}
      
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Cache Electron binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/electron
          key: ${{ runner.os }}-electron-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
      
      - name: Use debugging electron
        run: export DEBUG=electron*

      - name: Set architecture
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "Building for architecture: ${{ matrix.arch }}"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Publish Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      
    
      - name: Move signed OSX files
        run: |
          source ./build.sh
          moveSignedOsxFiles ${{ env.ARCH }} ${{ env.CURRENT_VERSION }}
        env:
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
on:
  push: null

permissions:
  contents: write

jobs:
  templative:
    if: true
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          # - macos-latest
          # - macos-13-xlarge
        node:
          - 18
        python:
          - 3.11.6
    steps:
      - uses: actions/checkout@v2

      - name: Add OSX Certifications
        if: matrix.os == 'macos-latest'
        run: |
          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
          security create-keychain -p actions $KEY_CHAIN
          security default-keychain -s $KEY_CHAIN
          security unlock-keychain -p actions $KEY_CHAIN
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
          rm -fr *.p12
        env:
          CERTIFICATE_OSX_APPLICATION: ${{secrets.CERTIFICATE_OSX_APPLICATION}}
          CERTIFICATE_PASSWORD: ${{secrets.CERTIFICATE_PASSWORD}}
      
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install pipenv
        run: pip install pipenv

      - name: Install Project Python Dependencies
        run: |
          cd ./python
          pipenv install
          pipenv install pyinstaller

      - name: Show Python Packages
        run: |
          cd ./python
          pipenv run pip list
      
      - name: Create Templative App/Exe
        run: |
          cd ./python
          pipenv run pyinstaller --distpath ../bin -y -n templative --log-level=DEBUG --onefile ./templative/__main__.py --hidden-import=asyncclick --hidden-import=engineio.async_drivers.aiohttp --hidden-import=engineio.async_aiohttp --collect-all templative --codesign-identity "Developer ID Application: Next Day Games LLC (Y9RWBVMY7R)"      
      
      - name: Upload Templative as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: container-state
          path: ./
      
      - name: Upload Templative Xref as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: xref
          path: ./python/build/templative/xref-templative.html

      - name: Upload Templative Exe as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: exe
          path: ./bin/templative.exe

      - name: List output for debug
        run: ls ./bin

      - name: Test Exe
        run: pyi-archive_viewer ./bin/templative.exe

      - name: Test Templative App
        run: ./bin/templative.exe

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      # - name: Install Node Packages
      #   run: npm install

      # - name: get-npm-version
      #   id: package-version
      #   shell: bash
      #   run: |
      #     PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
      #     echo $PACKAGE_VERSION
      #     echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
      
      # - name: Use debugging electron
      #   if: matrix.os == 'macos-latest'
      #   run: export DEBUG=electron*

      # - name: Create Package
      #   run: npm run package
      #   env: 
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      # - name: Make Distributable
      #   run: npm run makeFromPackage
      #   env: 
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      # - name: Create Publish Dry Run
      #   run: npm run createPublishDryRun
      #   env: 
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      # - name: Publish Dry Run
      #   run: npm run publishDryRun
      #   env: 
      #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
      
      # - name: Move Windows Squirrel Files into directory 
      #   if: matrix.os == 'windows-latest'
      #   shell: bash
      #   run: |
      #     ls
      #     mkdir ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
      #     mv ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}-full.nupkg ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}-full.nupkg
      #     mv ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe
      #     mv ./out/make/squirrel.windows/x64/RELEASES ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES
      #     cd ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
      #     ls
      #     cd ..

      # - name: Zip Windows Squirrel Files
      #   if: matrix.os == 'windows-latest' 
      #   run: |
      #     Compress-Archive -Path ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/* ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip 
      #     dir

      # - name: Deploy Windows to S3
      #   if: matrix.os == 'windows-latest'
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip s3://templative-artifacts/win32/x64/Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip --region us-west-2
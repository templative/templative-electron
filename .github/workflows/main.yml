on:
  push: {}

permissions:
  contents: write

jobs:
  test-csharp-signing:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Create minimal C# application
        shell: pwsh
        run: |
          mkdir TestSigningApp
          cd TestSigningApp
          
          # Create a simple C# console application
          @"
          using System;
          
          namespace TestSigningApp
          {
              class Program
              {
                  static void Main(string[] args)
                  {
                      Console.WriteLine("Hello, signed world!");
                  }
              }
          }
          "@ > Program.cs
          
          # Create a project file
          @"
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <OutputType>Exe</OutputType>
              <TargetFramework>net6.0</TargetFramework>
            </PropertyGroup>
          </Project>
          "@ > TestSigningApp.csproj
          
          # Build the application
          dotnet build -c Release
          
          # Output the path to the executable
          $exePath = (Get-Item .\bin\Release\net6.0\TestSigningApp.exe).FullName
          echo "EXE_PATH=$exePath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install AzureSignTool
        shell: pwsh
        run: |
          dotnet tool install --global AzureSignTool

      - name: Sign the C# application
        shell: pwsh
        run: |
          AzureSignTool sign `
            -fd sha256 `
            -tr http://timestamp.digicert.com `
            -td sha256 `
            -kvu "${{ secrets.AZURE_KEY_VAULT_URL }}" `
            -kvi "${{ secrets.AZURE_CLIENT_ID }}" `
            -kvt "${{ secrets.AZURE_TENANT_ID }}" `
            -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" `
            -kvc "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }}" `
            -v `
            "${{ env.EXE_PATH }}"

      - name: Verify C# application signing
        shell: pwsh
        run: |
          $sigCheck = Get-AuthenticodeSignature "${{ env.EXE_PATH }}"
          
          Write-Host "Signature status: $($sigCheck.Status)"
          Write-Host "Signer: $($sigCheck.SignerCertificate.Subject)"
          Write-Host "Status message: $($sigCheck.StatusMessage)"
          
          # More detailed certificate information
          Write-Host "Certificate details:"
          Write-Host "  - Issuer: $($sigCheck.SignerCertificate.Issuer)"
          Write-Host "  - Valid from: $($sigCheck.SignerCertificate.NotBefore)"
          Write-Host "  - Valid to: $($sigCheck.SignerCertificate.NotAfter)"
          Write-Host "  - Thumbprint: $($sigCheck.SignerCertificate.Thumbprint)"
          
          # Check if certificate chain is valid
          $chain = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Chain
          $chainIsValid = $chain.Build($sigCheck.SignerCertificate)
          Write-Host "Certificate chain is valid: $chainIsValid"
          
          if (-not $chainIsValid) {
            Write-Host "Chain status:"
            foreach ($status in $chain.ChainStatus) {
              Write-Host "  - $($status.StatusInformation)"
            }
          }
          
          # This will not fail the build, just provide information
          if ($sigCheck.Status -ne "Valid") {
            Write-Host "⚠️ Warning: Signature verification returned status: $($sigCheck.Status)"
            Write-Host "This may be expected in CI environment due to missing root certificates or network connectivity issues."
          } else {
            Write-Host "✅ Signature verification successful!"
          }

  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          missing_secrets=()
          
          # AWS credentials
          [[ -z "${{ secrets.AWS_ACCESS_KEY }}" ]] && missing_secrets+=("AWS_ACCESS_KEY")
          [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]] && missing_secrets+=("AWS_SECRET_ACCESS_KEY")
          
          # Apple credentials
          [[ -z "${{ secrets.APPLE_ID }}" ]] && missing_secrets+=("APPLE_ID")
          [[ -z "${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}" ]] && missing_secrets+=("TEMPLATIVE_APP_SPECIFIC_PASSWORD")
          [[ -z "${{ secrets.APPLE_TEAM_ID }}" ]] && missing_secrets+=("APPLE_TEAM_ID")
          
          # Windows signing
          [[ -z "${{ secrets.AWS_SIGNING_PROFILE_NAME }}" ]] && missing_secrets+=("AWS_SIGNING_PROFILE_NAME")
          
          # OSX certificates
          [[ -z "${{ secrets.CERTIFICATE_OSX_APPLICATION }}" ]] && missing_secrets+=("CERTIFICATE_OSX_APPLICATION")
          [[ -z "${{ secrets.CERTIFICATE_PASSWORD }}" ]] && missing_secrets+=("CERTIFICATE_PASSWORD")
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing:"
            printf "  - %s\n" "${missing_secrets[@]}"
            exit 1
          else
            echo "All required secrets are present."
          fi

  check-version:
    needs: validate-secrets
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.current-version }}
      should_build: ${{ steps.check-s3.outputs.should_build }}
    steps:
      - uses: actions/checkout@v2
      
      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - name: Check if version exists
        id: check-s3
        run: |
          VERSION=${{steps.package-version.outputs.current-version}}
          if aws s3 ls "s3://templative-artifacts/win32/x64/Templative-win32-x64-${VERSION}.zip" >/dev/null 2>&1 && \
             aws s3 ls "s3://templative-artifacts/darwin/x64/Templative-darwin-x64-${VERSION}.zip" >/dev/null 2>&1 && \
             aws s3 ls "s3://templative-artifacts/darwin/arm64/Templative-darwin-arm64-${VERSION}.zip" >/dev/null 2>&1; then
            echo "Version ${VERSION} already exists, skipping build"
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version ${VERSION} does not exist, proceeding with build"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          fi

  templative-windows:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        node:
          - 18
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - name: Install AzureSignTool
        shell: pwsh
        run: |
          dotnet tool install --global AzureSignTool
          
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      # - name: Download RELEASES file from S3
      #   shell: bash
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     mkdir -p ./out/make/squirrel.windows/x64/
      #     aws s3 cp s3://templative-artifacts/win32/x64/RELEASES ./out/make/squirrel.windows/x64/RELEASES --region us-west-2 || echo "No RELEASES file found, will create a new one"
          
      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}

      - name: Move Windows Squirrel Files into directory 
        shell: bash
        run: |
          ls
          mkdir ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          cp ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}-full.nupkg ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}-full.nupkg
          cp ./out/make/squirrel.windows/x64/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}}\ Setup.exe
          cp ./out/make/squirrel.windows/x64/RELEASES ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES
          cd ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}
          ls
          cd ..

      - name: Show contents directory
        shell: bash
        run: |
          ls -la
          echo "Checking for Windows Setup.exe file..."
          SETUP_FILE="./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"
          if [ -f "$SETUP_FILE" ]; then
            echo "✅ Setup.exe file exists at: $SETUP_FILE"
            ls -la "$SETUP_FILE"
          else
            echo "❌ Setup.exe file does not exist at: $SETUP_FILE"
            echo "Contents of directory:"
            ls -la "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/" || echo "Directory does not exist"
          fi

      - name: Sign the Windows Setup.exe
        shell: pwsh
        run: |
          AzureSignTool sign `
            -fd sha256 `
            -tr http://timestamp.digicert.com `
            -td sha256 `
            -kvu "${{ secrets.AZURE_KEY_VAULT_URL }}" `
            -kvi "${{ secrets.AZURE_CLIENT_ID }}" `
            -kvt "${{ secrets.AZURE_TENANT_ID }}" `
            -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" `
            -kvc "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }}" `
            -v `
            "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"

      - name: Verify code signing
        shell: pwsh
        run: |
          $setupExePath = "./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/templative-${{steps.package-version.outputs.current-version}} Setup.exe"
          $sigCheck = Get-AuthenticodeSignature $setupExePath
          
          Write-Host "Signature status: $($sigCheck.Status)"
          Write-Host "Signer: $($sigCheck.SignerCertificate.Subject)"
          Write-Host "Status message: $($sigCheck.StatusMessage)"
          
          # More detailed certificate information
          Write-Host "Certificate details:"
          Write-Host "  - Issuer: $($sigCheck.SignerCertificate.Issuer)"
          Write-Host "  - Valid from: $($sigCheck.SignerCertificate.NotBefore)"
          Write-Host "  - Valid to: $($sigCheck.SignerCertificate.NotAfter)"
          Write-Host "  - Thumbprint: $($sigCheck.SignerCertificate.Thumbprint)"
          
          # Check if certificate chain is valid
          $chain = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Chain
          $chainIsValid = $chain.Build($sigCheck.SignerCertificate)
          Write-Host "Certificate chain is valid: $chainIsValid"
          
          if (-not $chainIsValid) {
            Write-Host "Chain status:"
            foreach ($status in $chain.ChainStatus) {
              Write-Host "  - $($status.StatusInformation)"
            }
          }
          
          # This will not fail the build, just provide information
          if ($sigCheck.Status -ne "Valid") {
            Write-Host "⚠️ Warning: Signature verification returned status: $($sigCheck.Status)"
            Write-Host "This may be expected in CI environment due to missing root certificates or network connectivity issues."
          } else {
            Write-Host "✅ Signature verification successful!"
          }

      - name: Upload Releases
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/RELEASES s3://templative-artifacts/win32/x64/RELEASES --region us-west-2

      - name: Zip Windows Squirrel Files 
        run: |
          Compress-Archive -Path ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}/* ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip 
          dir

      - name: Deploy Windows to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip s3://templative-artifacts/win32/x64/Templative-win32-x64-${{steps.package-version.outputs.current-version}}.zip --region us-west-2
          
      - name: Publish the Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          
  templative-osx:
    needs: check-version
    if: false # needs.check-version.outputs.should_build == 'true'
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            node: 18
            arch: x64
          - os: macos-latest
            node: 18
            arch: arm64
    steps:
      - name: Print architecture
        shell: bash
        run: uname -m

      - uses: actions/checkout@v2

      - name: Add OSX Certifications
        run: |
          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          echo $CERTIFICATE_PASSWORD
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
          echo "First few lines of the decoded certificate file:"
          head -n 10 $CERTIFICATE_P12
          security create-keychain -p actions $KEY_CHAIN
          security default-keychain -s $KEY_CHAIN
          security unlock-keychain -p actions $KEY_CHAIN
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
          rm -fr *.p12
        env:
          CERTIFICATE_OSX_APPLICATION: ${{secrets.CERTIFICATE_OSX_APPLICATION}}
          CERTIFICATE_PASSWORD: ${{secrets.CERTIFICATE_PASSWORD}}
      
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Force remove node_modules
        shell: bash
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Cache Electron binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/electron
          key: ${{ runner.os }}-electron-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install Node Packages
        run: npm install

      - name: List npm packages
        run: npm list -g --depth=0

      - name: get-npm-version
        id: package-version
        shell: bash
        run: |
          PACKAGE_VERSION=$(npm pkg get version --workspaces=false | tr -d \")
          echo $PACKAGE_VERSION
          echo "current-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
      
      - name: Use debugging electron
        run: export DEBUG=electron*

      - name: Set architecture
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "Building for architecture: ${{ matrix.arch }}"

      - name: Create Package
        run: npm run package
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Make Distributable
        run: npm run makeFromPackage
        env: 
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Create Publish Dry Run
        run: npm run createPublishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}

      - name: Publish Dry Run
        run: npm run publishDryRun
        env: 
          DEBUG: 'electron-forge:*'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEMPLATIVE_APP_SPECIFIC_PASSWORD: ${{ secrets.TEMPLATIVE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CURRENT_VERSION: ${{steps.package-version.outputs.current-version}}
          ARCH: ${{ matrix.arch }}